<?php

/**
 * Implementation of hook_views_api().
 */
function uc_views_gpfeed_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'uc_views_gpfeed') .'/views',
  );
}

/**
 * Implementation of hook_menu()
 */
function uc_views_gpfeed_menu() {
  $items = array();

  $items['uc_views_gpfeed/import'] = array(
    'title' => 'Import google taxonomy',
    'access callback' => TRUE,
    'description' => 'Import the google taxonomy file into the database.',
    'page callback' => 'uc_views_gpfeed_google_taxonomy_import',
    'page arguments' => array(null, TRUE),
    'type' => MENU_CALLBACK,
  );

  $items['uc_views_gpfeed/autocomplete/google_taxonomy'] = array(
    'title' => 'google taxonomy autocomplete',
    'page callback' => 'uc_views_gpfeed_autocomplete_google_taxonomy',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['admin/store/settings/uc_views_gpfeed'] = array(
    'title' => 'Google products feed settings',
    'access arguments' => array('administer google products feed'),
    'description' => 'Configure google products feed taxonomy mappings and defaults.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_views_gpfeed_settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/store/settings/uc_views_gpfeed/general'] = array(
    'title' => 'Settings',
    'description' => 'Configure google products feed defaults.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/store/settings/uc_views_gpfeed/taxonomy'] = array(
    'title' => 'Taxonomy mapping',
    'description' => 'Configure google products taxonomy mapping.',
    'access arguments' => array('administer google products feed'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_views_gpfeed_settings_taxonomy'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/store/settings/uc_views_gpfeed/taxonomy/default'] = array(
    'title' => 'Default',
    'description' => 'Configure google products taxonomy mapping.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -100,
  );
  
  $types = uc_product_types();
  $vocabularies = array();
  foreach ($types as $type) {
    $vocabularies = taxonomy_get_vocabularies($type);
    foreach ($vocabularies as $vocabulary) {
      $items['admin/store/settings/uc_views_gpfeed/taxonomy/' . $vocabulary->vid] = array(
        'title' => $vocabulary->name,
        'description' => 'Configure google products taxonomy mapping.',
        'access arguments' => array('administer google products feed'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('uc_views_gpfeed_settings_taxonomy', 5),
        'type' => MENU_LOCAL_TASK,
        'weight' => $vocabulary->weight,
      );
    }
  }


  return $items;
}

/**
 * FAPI validate callback
 */
function uc_views_gpfeed_settings_validate($form, &$form_state) {
  if (!file_exists($form_state['values']['google_taxonomy_file_path'])) {
    form_set_error('google_taxonomy_file_path', t('The google taxonomy file specified does not exist.'));
  }
}

/**
 * FAPI callback for module's settings.
 */
function uc_views_gpfeed_settings() {

  // Check for a new uploaded logo, and use that instead.
  if ($file = file_save_upload('google_taxonomy_file_upload')) {
    $parts = pathinfo($file->filename);
    $filename = 'google_taxonomy.'. $parts['extension'];

    // The image was saved using file_save_upload() and was added to the
    // files table as a temporary file. We'll make a copy and let the garbage
    // collector delete the original upload.
    if (file_copy($file, $filename, FILE_EXISTS_REPLACE)) {
      $_POST['google_taxonomy_file_path'] = $file->filepath;
    }

    uc_views_gpfeed_google_taxonomy_import($file->filepath);
  }

  $form['google_taxonomy_file'] = array(
    '#type' => 'fieldset',
    '#title' => "Google taxonomy file",
    '#description' => t('If you wish to import a different taxonomy list, just upload the list of taxonomy in txt format, one taxonomy per line. This file can be download from google. If you changed the path manually, you will need to <a href="!import_uri">import it manually</a>.', array('!import_uri' => url('uc_views_gpfeed/import')))
  );
  $form['google_taxonomy_file']['google_taxonomy_file_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to taxonomy file'),
    '#default_value' => variable_get('google_taxonomy_file_path', drupal_get_path('module', 'uc_views_gpfeed') . '/taxonomy.en-GB.txt'),
    '#description' => t('The path to the file you would like to import google taxonomies from.'));

  $form['google_taxonomy_file']['google_taxonomy_file_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload google taxonomy list'),
    '#maxlength' => 40,
    '#description' => t("If you don't have direct file access to the server, use this field to upload the google taxonomy list in a txt format.")
  );

  $form['#attributes'] = array('enctype' => 'multipart/form-data');
  
  return system_settings_form($form);
}

/**
 * FAPI submit callback
 */
function uc_views_gpfeed_settings_taxonomy_submit($form, &$form_state) {
  $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';

  if (!empty($form_state['values']['vid'])) {
    db_query("DELETE FROM {uc_views_gpfeed} WHERE vid = %d", $form_state['values']['vid']);

    if ($op != t('Reset to defaults')) {
      foreach ($form_state['values'] as $key => $value) {
        if (!empty($value)) {
          if (preg_match('/google_taxonomy_([0-9]+)/', $key, $matches)) {
            $record = (object) array('tid' => $matches[1], 'google_taxonomy' => $value, 'vid' => $form_state['values']['vid']);
            drupal_write_record('uc_views_gpfeed', $record);
          }
        }
      }
    }
  }
  else {
    foreach (array('google_taxonomy_default') as $key) {
      if ($op == t('Reset to defaults')) {
        variable_del('google_taxonomy_default');
      }
      else {
        $value = $form_state['values'][$key];
        if (is_array($value) && isset($form_state['values']['array_filter'])) {
          $value = array_keys(array_filter($value));
        }
        variable_set($key, $value);
      }
    }
  }

  if ($op == t('Reset to defaults')) {
    drupal_set_message(t('The configuration options have been reset to their default values.'));
  }
  else {
    drupal_set_message(t('The configuration options have been saved.'));
  }
}

/**
 * Load function for taxonomy mappings
 */
function uc_views_gpfeed_settings_taxonomy_load($tid) {
  $taxonomy_mapping = db_result(db_query("SELECT google_taxonomy FROM {uc_views_gpfeed} WHERE tid = %d", $tid));
  return $taxonomy_mapping;
}

/** * FAPI callback for module's settings.
 */
function uc_views_gpfeed_settings_taxonomy($form_state, $vid = null) {
  $form['description'] = array(
    '#type' => 'markup',
    '#value' => t('<p>The <b>google prouduct category</b> MUST be one of google\'s taxonomy while the <b>product_type</b> field can be anything, but it\'s recommended that you map the terms you set up to use on the feed views to be mapped.</p><p>You should really provide one google mapping for all of the terms that are set up to be displayed on the view. Doing this will help find your products better on google. In the case of hierarchical vocabularies, if no mapping term is used for a specific one, the parent one will be used. There\'s also an optional default taxonomy that you can use for all of your blank taxonomy mappings.</p><p>Only the vocabularies assigned to products are included here.</p><p> <a href="!file_uri">View full taxonomy list</a>.</p>', array('!file_uri' => base_path() . variable_get('google_taxonomy_file_path', drupal_get_path('module', 'uc_views_gpfeed') . '/taxonomy.en-GB.txt'))),
  );

  if (is_null($vid)) {
    $form['google_taxonomy_default'] = array(
      '#type' => 'textfield',
      '#title' => t('Default google taxonomy'),
      '#default_value' => variable_get('google_taxonomy_default', ''),
      '#description' => t('Optional default vocabulary for your blank terms below. Leaving all empty except this one will make all of your products to be placed under the same google taxonomy.'),
      '#autocomplete_path' => 'uc_views_gpfeed/autocomplete/google_taxonomy',
      '#size' => 120,
    );
  }
  else {
    $terms = taxonomy_get_tree($vid);
    foreach($terms as $term) {
      $key = 'tid:'. $term->tid .':0';
      $form[$key]['#term'] = (array) $term;
      $form[$key]['view'] = array('#value' => $term->name);
      $form[$key]['google_taxonomy_' . $term->tid] = array(
        '#type' => 'textfield',
        '#autocomplete_path' => 'uc_views_gpfeed/autocomplete/google_taxonomy',
        '#default_value' => uc_views_gpfeed_settings_taxonomy_load($term->tid),
      );
    }
  }

  $form['vid'] = array('#type' => 'hidden', '#value' => $vid);

  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );
  $form['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset to defaults') );

  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  //$form['#submit'][] = 'system_settings_form_submit';
  return $form;
}

/**
 * Implementation of hook_theme().
 */
function uc_views_gpfeed_theme() {
  return array(
    'uc_views_gpfeed_settings_taxonomy' => array(
      'arguments' => array('form' => array()),
    ),
    'uc_views_gpfeed_field_availability' => array(
      'arguments' => array('sku' => array()),
    ),
  );
}

/**
 * Theme the taxonomy mappings page
 *
 * @ingroup themeable
 */
function theme_uc_views_gpfeed_settings_taxonomy($form) {
  $errors = form_get_errors() != FALSE ? form_get_errors() : array();

  $rows = array();
  foreach (element_children($form) as $key) {
    if (isset($form[$key]['#term'])) {
      $term = &$form[$key];
      $row = array();
      $row[] = (isset($term['#term']['depth']) && $term['#term']['depth'] > 0 ? theme('indentation', $term['#term']['depth']) : '') . drupal_render($term['view']);
      $row[] = drupal_render($term['google_taxonomy_' . $term['#term']['tid']]);
      $row = array('data' => $row);
      $rows[$key] = $row;
    }
  }

  // Add necessary classes to rows.
  foreach ($rows as $key => $row) {
    $classes = array();

    // Add an error class if this row contains a form error.
    foreach ($errors as $error_key => $error) {
      if (strpos($error_key, $key) === 0) {
        $classes[] = 'error';
      }
    }
    $rows[$key]['class'] = implode(' ', $classes);
  }

  $output .= drupal_render($form['description']);
  $output .= drupal_render($form['google_taxonomy_default']);
  if (count($rows)) {
    $header = array(t('Term'), t('Google taxonomy'));
    $output .= theme('table', $header, $rows);
  }
  $output .= drupal_render($form);

  return $output;
}


/**
 * Import the google's taxonomy into the database
 */
function uc_views_gpfeed_google_taxonomy_import($filepath = null, $redirect = FALSE) {
  $t = get_t();
  if (is_null($filepath)) {
    $filepath = variable_get('google_taxonomy_file_path', drupal_get_path('module', 'uc_views_gpfeed') . '/taxonomy.en-GB.txt');
  }

  if (file_exists($filepath)) {
    db_query("DELETE FROM {uc_views_gpfeed_google_taxonomy}");
    $f = fopen($filepath, 'r');
    while($line = fgets($f)) {
      $line = trim($line);
      if (!empty($line) && $line[0] != '#' && $line != '') {
        db_query("INSERT INTO {uc_views_gpfeed_google_taxonomy} (google_taxonomy) VALUES ('%s')", $line);
      }
    }

    fclose($f);
    drupal_set_message($t('Google taxonomy file has been imported into the database.'));
  }
  else {
    drupal_set_message($t('Google taxonomy file is not present, please check path, permissions or upload a new file.'), 'error');
  }
  
  if ($redirect) {
    drupal_goto('admin/store/settings/uc_views_gpfeed');
  }
}

/**
 * Menu callback: autocomplete for google's taxonomies
 */
function uc_views_gpfeed_autocomplete_google_taxonomy($string = '') {
  $matches = array();

  if ($string) {
    $result = db_query_range("SELECT google_taxonomy FROM {uc_views_gpfeed_google_taxonomy} WHERE google_taxonomy LIKE '%%%s%%'", $string, 0, 100);
    while ($row = db_fetch_object($result)) {
      $matches[$row->google_taxonomy] = check_plain($row->google_taxonomy);
    }
    natcasesort($matches);
  }

  print drupal_to_js($matches);
  exit();
}

/**
 * Get a mapping, if any, for a taxonomy term ID
 */
function uc_views_gpfeed_taxonomy_mapping($tid) {
  $google_taxonomy = uc_views_gpfeed_settings_taxonomy_load($tid);

  // if there's no mapping for the term, check its parents
  if (empty($google_taxonomy)) {
    $parents = taxonomy_get_parents_all($tid);
    array_shift($parents);
    foreach($parents as $term) {
      $google_taxonomy = uc_views_gpfeed_settings_taxonomy_load($term->tid);
      if (!empty($google_taxonomy)) {
        break;
      }
    }
  }

  // finally, if no mapping was found, return default, if any
  if (empty($google_taxonomy)) {
    $google_taxonomy = variable_get('google_taxonomy_default', '');
  }

  return $google_taxonomy;
}

function theme_uc_views_gpfeed_field_availability($model) {
  if (module_exists('uc_stock')) {
    $stock = uc_stock_level($model);
    if ($stock === FALSE || $stock > 0) {
      return 'in stock';
    }
    else {
      return 'out of stock';
    }
  }
  else {
    // if stock module is not present, we assume an in stock item
    return 'in stock';
  }
}

